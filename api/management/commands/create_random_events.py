# -*- coding: utf8 -*-
# Python
from datetime import datetime
from random import randint
import sys
# Django
from django.core.management.base import BaseCommand, CommandError
# Custom
from schemas.models.event_history import EventHistory
from schemas.models.event_type import EventType
from schemas.models.event import Event



class Command(BaseCommand):
    
    def __init__(self):
        super(Command, self).__init__()


    def handle(self, *args, **options):
        print()
        print()
        start_date = datetime.now()
        print ("----------------------------------------------")
        print ("[%s] Iniciando" % start_date.strftime("%Y-%m-%d %H:%M:%S"))
        print ("----------------------------------------------")


        """ Command designed for filling the database """

        event_types = ['login', 'resource-209', 'recovery','backup','settings','admin']
        for event in event_types:
            try:
                #Try to create first the event types, then on success it will try to create 
                event_type, created = EventType.objects.get_or_create(
                    name = event,
                )

                if created:
                    print("Created new event type")
                    event_type.description = "Description generated by command {0}".format(__name__)
                    event_type.save()

                    try:
                        event, created = Event.objects.get_or_create(
                            event = event_type
                        )
                        if created:
                            print("Created new event")

                    except expression as Stage2Error:
                        print(Stage2Error)

                else:
                    try:
                        event, created = Event.objects.get_or_create(
                            event = event_type
                        )
                        if created:
                            print("Created new event")

                    except expression as Stage2Error:
                        print(Stage2Error)

            except Exception as Stage1Error:
                print(Stage1Error)

        a = 0
        bulk_list = []

        while a < 30000:
            try:
                random_number = randint(0, len(event_types)-1)
                event = Event.objects.get(event__name=event_types[random_number])
            except Exception as Stage3Error:
                print(Stage3Error)
            for _ in range(250):
                bulk_list.append(EventHistory(name=event, creation_date = datetime(2020, 11, randint(10,28), randint(0,23), randint(0,59))))
                a += 1
                if len(bulk_list) > 250:
                    EventHistory.objects.bulk_create(bulk_list)
                    bulk_list = []


        finish_date = datetime.now()
        print ("**********************************************")
        print ("[%s] Terminando" % finish_date.strftime("%Y-%m-%d %H:%M:%S"))
        print ("----------------------------------------------")
        self.stdout.write(
            self.style.SUCCESS('[ %s ] tardo el script en ejecutarse' % (finish_date - start_date))
        )
        print ("**********************************************\n\n")
